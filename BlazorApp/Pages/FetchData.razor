@page "/fetchdata"

@using Microsoft.Extensions.Logging
@using ObjectsApi.Services
@using ObjectsApi.Models
@using System.ComponentModel.DataAnnotations
@inject AlarmService AlarmService
@inject ILogger<FetchData> Logger

<h1>Alarm Maker</h1>

<button class="btn btn-primary" @onclick="RequestAlarm">Make An Alarm</button>
<br /><br />
<div hidden="@alarmViewShown">
    <EditForm Model="@alarm" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        Alarm Name: <InputText id="name" @bind-Value="alarm.Name" /><br />
        Alarm Is Active: <InputCheckbox id="active" @bind-Value="alarm.Active" /><br />
        Alarm Type (integer): <InputNumber id="alarmType" @bind-Value="alarm.AlarmType" /><br /><br />
        <button type="button" @onclick="ShowAffectedEquipment">Add Affected Equipment</button><br /><br />
        <p hidden="@affectedEquipmentShown">
            <table class="table">
                <thead>
                    <tr>Affected Equipment Options</tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < affectedEquipmentOptions.Count; i++)
                    {
                        <tr>
                            <td><InputCheckbox id=@affectedEquipmentOptions[i].Name @bind-Value=@affectedEquipments[i] /></td>
                            <td>@affectedEquipmentOptions[i].Name</td>
                        </tr>
                    }
                </tbody>
            </table>
        </p><br />
        <button class="btn btn-primary" type="submit">Submit</button>
        <p hidden ="@validSubmission">
            Please fill out all form options.
        </p>
    </EditForm>
</div>

@code {
    [Parameter]
    public RenderFragment<BaseObject> RowTemplate { get; set; }

    private Alarm alarm = new Alarm();
    private bool affectedEquipmentShown = true;
    private bool alarmViewShown = true;
    private bool validSubmission = true;
    private List<BaseObject> affectedEquipmentOptions = new List<BaseObject>();
    private List<bool> affectedEquipments = new List<bool>();

    private void RequestAlarm()
    {
        alarmViewShown = !alarmViewShown;
    }

    private void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");
        validSubmission = true;
        alarmViewShown = true;

        // Process the valid form
        alarm.Id = Guid.NewGuid().ToString();
        alarm.Type = "Alarm";
        alarm.TimeOfFailure = DateTime.Now;
        AlarmService.Create(alarm);
    }

    private void HandleInvalidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

        validSubmission = false;
    }

    private void ShowAffectedEquipment()
    {
        affectedEquipmentShown = !affectedEquipmentShown;
        //affectedEquipmentOptions = EquipmentService.Get();
    }
}
<h1>Alarms</h1>

@if (alarms == null)
{
    <p><em>Loading...</em></p>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Active</th>
            <th>Alarm Type</th>
            <th>Affected Equipment</th>
            <th>Time of Failure</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var alarm in alarms)
        {
            <tr>
                <td>@alarm.Name</td>
                <td>@alarm.Active</td>
                <td>@alarm.AlarmType</td>
                <td>@((alarm.AffectedEquipment != null).ToString())</td>
                <td>@alarm.TimeOfFailure</td>
            </tr>
        }
    </tbody>
</table>

<p>
    There are @alarms.Count alarms available. 
</p>
}

@code {
    private List<Alarm> alarms;

    protected override async Task OnInitializedAsync()
    {
        AlarmService = new AlarmService();
        alarms = AlarmService.Get();
    }
}
